### ALERT ###
# I couldn't connect to remote database server on VM from my loacl machine. I found the solution - azure cloud blocked input/output ports in some way. I changed the settings in 'Network' allowing wide range of ports 1000-65535.


To connect to VM you can use ssh protocol with the use of your terminal.
ssh [computername]@[VM ip]
ssh imfilip@20.111.18.87

Enter the password you provided creating your VM.

First thing you should do after your VM is created is to update information of available apps (e.g. if there are latest version of apps you have installed) for Ubuntu and then upgrade all apps installed on your VM.
sudo apt update && sudo apt upgrade -y

-y - ensures all prompts will be passed with acceptance

Check if python is installed:
python --version
python3 --version

If not, install it:
sudo apt install python3

Check if pip is installed:
pip --version
pip3 --version

If not, install it:
sudo apt install python3-pip

Install virtualenv python package:
sudo pip3 install virtualenv

Install postgresql:
sudo apt install postgresql postgresql-contrib -y


You can check if postgresql server is running on your machine:
ps -ef | grep postgres

or

sudo systemctl status postgresql

ps - list all active processes

Or:
pg_lsclusters 
This command show information about all PostgreSQL clusters

List of all packages installed on tour VM contain postgres in name:
dpkg -l | grep postgres

If something is wrong you can uninstall all packages related to postresql:
sudo apt-get --purge remove postgresql postgresql-*

Delete all folders:
sudo rm -rf /var/lib/postgresql/
sudo rm -rf /var/log/postgresql/
sudo rm -rf /etc/postgresql/

Delete postgres user:
sudo deluser postgres

List of all users of your VM:
sudo cat /etc/passwd

You can try to switch to postgres user:
su - postgres

In my case prompt occurs to provide password to this user (on the tutorial there was that requirements).
Thi is due to the fact that Azure VM does not provide you with the access to root user. In order to change user to postgres using su, you have to know root password.
There is another way. This one worked:
sudo -u postgres psql postgres


Now you can change the password for postgres user:
\password postgres


Change the config files of postgresql:
pg_hba.conf
postgresql.conf

with vi application:

sudo vi postgresql.conf
Change the file adding ip addresses you want to connect remotly from. I have added '*', what means all addresses.

sudo vi pg_hba.conf
Change the user from peer to md5, which mean that in order to login to postgresql you do not have to switch user to unix/postgres.

After the files are changed restart the postgresql instance:
sudo systemctl restart postgresql
Or
sudo service postgresql restart

It is recommended to not let using root user on production server. Thus new user should be created:
sudo adduser [username]

You have to add sudo privilige to new user:
sudo usermod -aG sudo nowy

You can switch users by:
su - [username]


Ok. You machine is ready. Let's deploy your application. Firstly create folder in your home directory (or wherever you want):
mkdir app

Create python virtualenv:
virtualenv venv

Check if it is created properly
ls -la

And now you can activate that environment
source /venv/bin/activate

By deactivate you can get out of virtual env.

Create folder src
mkdir src
And copy all data from git to this src using git clone command. Since August 2021 password auth from console is not available. You have to create special token on GitHub and provide it instead of password.

Now you can install all packages from requirements.txt file. Firstly activate venv and then install:
pip install -r requirements.txt

I had some issues (the tutor as well). There was lack of some library - libpq-fe.h (some dependency of psycopg2)

Install that library manually (it is not python lib), but firstly remember to deactivate venv:
sudo apt install libpq-dev

Another one library missed:
sudo apt install python3-testresources

I had another one issue which does not let me use pip app. Even checking the pip version returns error. I uninstalled pip and installed it again.

Ok,  everything seems to be prepared to run app. Let's do it:
uvicorn app.main:app

8 validation errors occured - missing environmental variables.

Ok, so let's create those missing environmental variables. On linux you can do it by e.g.
export MY_NAME=imfilip
And then you can check all envvariables by:
printenv

Remove this variable by
unset MY_NAME

It is extremely inconvinient to create all env variables manually. There is easier way. Back to home directory and create file .env:
touch .env

The file by defult is hidden. You can list those files by:
ls -la

Edit the file and for example add following:
export MY_NAME=imfilip
export MY_PASS=pass

Then write and quit the file. To activate the script type:
source .env
That should create environemntal variables. Check printenv.

To do it more like a dev you should create .env file without those export prefixes. Instead this file should look like .env file on your local machine:
DATABASE_HOSTNAME=localhost
DATABASE_PORT=5432

To do that create remote .env file by copying data from local using vi editor. Then execute file by command:
set -o allexport; source /home/imfilip/.env; set +o allexport

But when you reboot your machine all lately set variables disapear. Try by reboot and reconect to VM.

To solve the issue we have to add set command to file that is executed every time machine is turning on.
You can find that file in your home directory - it is hidden, so type:
ls -la

Open file .profile and at the end of the file paste script 
set -o allexport; source /home/imfilip/.env; set +o allexport

Now create the database in your postgresql server. To do that get into psql:
psql -U postgres
and create database:
create database fastapi;

Make sure that your all environment variables match with all your settings.

It time to create database structure. To do that we will use alembic revisions. Go into app directory, activate venv, go into src folder and run:
alembic upgrade head

You can now connect to the database from your local pgAdmin app. I had an issue with the connection - pgAdmin couldn't connect to remote server. I checked the firewalls on linux VM (there are some apps) and all ports were open. The problem was with Azure firewalls - I opened wide range of ports.

Now you can go to src directory (with activated venv) and run application using uvicorn:
uvicorn app.main:app

When you open your browser on ip address with specified port (8000) nothing appears. It is due to limited allowed clients, who can connect - only localhost. To solve this, you have to allow to connect all addresses:
uvicorn --host 0.0.0.0 app.main:app

We will use process manager gunicorn:
pip install gunicorn

Using gunicorn you can set number of workers (processes under the hood - in command below there are 4 workers set):
gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000

More paramaters you can check with:
gunicorn --help

After execution of above commnad console is frozen. To check running processes run another one connection and check:
sudo ps -ef | grep uni

Ok, now we would like to make this application is running in the background. We will create own service!

In the folder /etc/systemd/system/ ls you can find all services installed on the machine.
Some settings files need to be created.
Create file with the name of you service (my was fastapi) and copy commands from file gunicorn.service.

EnvironmentFile=/home/imfilip/.env 
Above is necessary because services can not use environment variables. Thus you have to specify file with variables you want to use as environment.

Every time you change sth in your service settings file you have to restart the service:
sudo systemctl daemon-reload
sudo systemctl restart fastapi.service

Now you have to ensure that your service will be running after reboot. The info if your service reboots automatically after reboot is available in line 'Loaded:' in service status response.
After the path to service there should be 'enabled'.
It is easy, just run:
sudo systemctl enable fastapi.service


In professional deployment very often the proxy server is used. In our case we will use NGINX. Any request will be sent to NGINX and then NGINX will request main app. It is optimized for 'SSL Termination'.
sudo apt install nginx -y

sudo systemctl start nginx

When the nginx is running the vm machine ip through web browser will direct to default page of nginx. Before it works for me I had to open all ports in Azure settings.

Check directory /etc/nginx/sites-available - thera are some deafult settings of nginx server (file deafult - server block).
Change this file with settings from file nginx.
The main part is 'proxy_pass http://localhost:8000;'. The remainders are just for optimalization. 
This mean that nginx will be a proxy server for http protocel for localhost at port 8000 - the direction to our app.

Restart nginx service. Now uder the ip address your app should appear.

How to add custom DNS name to our IP?
Check the website:
https://www.c-sharpcorner.com/article/adding-domain-name-to-azure-vm-using-dns-zone/

To put it in a nutshell:
Set up the DNS Zone at Azure. Next the DNS servers' names copy to your domain provider. Next click on Record Set and add new record set:
First record:
Name: @
Type: A
IP Address: IP address of your VM

If everything will be saved (even few hours) you should have access to your VM by your custom domain: www.[domain].pl.
Create second record with www isntead of @ and CNAME istead of A. Then domain [domain].pl should work as well.

It should last some time, but you can check if your DNS name is correctly assign by:
sudo nslookup -type=a [domain].pl


