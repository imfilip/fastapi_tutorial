To connect to VM you can use ssh protocol with the use of your terminal.
ssh [computername]@[VM ip]
ssh imfilip@20.111.18.87

Enter the password you provided creating your VM.

First thing you should do after your VM is created is to update information of available apps (e.g. if there are latest version of apps you have installed) for Ubuntu and then upgrade all apps installed on your VM.
sudo apt update && sudo apt upgrade -y

-y - ensures all prompts will be passed with acceptance

Check if python is installed:
python --version
python3 --version

If not, install it:
sudo apt install python3

Check if pip is installed:
pip --version
pip3 --version

If not, install it:
sudo apt install python3-pip

Install virtualenv python package:
sudo pip3 install virtualenv

Install postgresql:
sudo apt install postgresql postgresql-contrib -y


You can check if postgresql server is running on your machine:
ps -ef | grep postgres

or

sudo systemctl status postgresql

ps - list all active processes

Or:
pg_lsclusters 
This command show information about all PostgreSQL clusters

List of all packages installed on tour VM contain postgres in name:
dpkg -l | grep postgres

If something is wrong you can uninstall all packages related to postresql:
sudo apt-get --purge remove postgresql postgresql-*

Delete all folders:
sudo rm -rf /var/lib/postgresql/
sudo rm -rf /var/log/postgresql/
sudo rm -rf /etc/postgresql/

Delete postgres user:
sudo deluser postgres

List of all users of your VM:
sudo cat /etc/passwd

You can try to switch to postgres user:
su - postgres

In my case prompt occurs to provide password to this user (on the tutorial there was that requirements).
Thi is due to the fact that Azure VM does not provide you with the access to root user. In order to change user to postgres using su, you have to know root password.
There is another way. This one worked:
sudo -u postgres psql postgres


Now you can change the password for postgres user:
\password postgres


Change the config files of postgresql:
pg_hba.conf
postgresql.conf

with vi application:

sudo vi postgresql.conf
Change the file adding ip addresses you want to connect remotly from. I have added '*', what means all addresses.

sudo vi pg_hba.conf
Change the user from peer to md5, which mean that in order to login to postgresql you do not have to switch user to unix/postgres.

After the files are changed restart the postgresql instance:
sudo systemctl restart postgresql
Or
sudo service postgresql restart

It is recommended to not let using root user on production server. Thus new user should be created:
sudo adduser [username]

You have to add sudo privilige to new user:
sudo usermod -aG sudo nowy

You can switch users by:
su - [username]


Ok. You machine is ready. Let's deploy your application. Firstly create folder in your home directory (or wherever you want):
mkdir app

Create python virtualenv:
virtualenv venv

Check if it is created properly
ls -la

And now you can activate that environment
source /venv/bin/activate

By deactivate you can get out of virtual env.

Create folder src
mkdir src
And copy all data from git to this src using git clone command. Since August 2021 password auth from console is not available. You have to create special token on GitHub and provide it instead of password.

Now you can install all packages from requirements.txt file. Firstly activate venv and then install:
pip install -r requirements.txt

I had some issues (the tutor as well). There was lack of some library - libpq-fe.h (some dependency of psycopg2)

Install that library manually (it is not python lib), but firstly remember to deactivate venv:
sudo apt install libpq-dev

Another one library missed:
sudo apt install python3-testresources

I had another one issue which does not let me use pip app. Even checking the pip version returns error. I uninstalled pip and installed it again.

Ok,  everything seems to be prepared to run app. Let's do it:
uvicorn app.main:app

8 validation errors occured - missing environmental variables.

Ok, so let's create those missing environmental variables. On linux you can do it by e.g.
export MY_NAME=imfilip
And then you can check all envvariables by:
printenv

Remove this variable by
unset MY_NAME

It is extremely inconvinient to create all env variables manually. There is easier way. Back to home directory and create file .env:
touch .env

The file by defult is hidden. You can list those files by:
ls -la

Edit the file and for example add following:
export MY_NAME=imfilip
export MY_PASS=pass

Then write and quit the file. To activate the script type:
source .env
That should create environemntal variables. Check printenv.
